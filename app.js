
/**
 * Module dependencies.
 */

var express   = require('express')
  , routes 	  = require('./routes')
  , mongoose  = require('mongoose')
  , fs		  = require('fs')
  , exec      = require('child_process').exec


/**
 * Constants definition
 */

var TIME_LIMIT = 10*1000  	// TIME_LIMIT is the Max time to running .bin (10 sec)
  , MAX_BUFFER = 5120*1024;	// MAX_BUFFER of the output generated by .bin (5M)

var app = module.exports = express.createServer();

mongoose.connect('mongodb://localhost/submit');

// Schema
var Submit = new mongoose.Schema({
	name:     String,
	languaje: String,
	date: { type: Date, default: Date.now }
});

var SubmitModel = mongoose.model('Submit', Submit);

app.use(express.bodyParser());
// Configuration

app.configure(function(){
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(__dirname + '/public'));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); 
});

app.configure('production', function(){
  app.use(express.errorHandler()); 
});


var exec_file;

// Routes

app.get('/', routes.index);

app.get('/uploads/new', function(req,res){
	res.render('uploads/new');
});

app.post('/uploads', function(req, res){
	var root = __dirname + '/static/uploads/';
	var rq = req.files;
	for(var f in rq){
		var data = fs.readFileSync(rq[f].path, 'utf8');
		fs.writeFileSync(root + rq[f].name, data, encoding='utf8')
	}

	//To see file extension
	var ext = rq.src.name.split('.');

	if(ext[1] == 'c' || ext[1] == 'cpp'){
		var src_file = root + rq.src.name
			, kill_msj = ""
			, exec_file = root + ext[0]
			, command1 = 'g++ ' + src_file + ' -o ' + exec_file + '.bin'
			//, command2 = exec_file + '.bin' + ' < ' + exec_file + '.in > ' +  exec_file + '.out'
			, command2 = exec_file + '.bin' + ' < ' + exec_file + '.in'

			, child = exec(command1, {timeout: TIME_LIMIT},function (error, stdout, stderr) {
				console.log('stdout: ' + stdout);
				console.log('stderr: ' + stderr);
				if (error !== null) {
					console.log('exec compilation: ' + error.signal);
				}
			});

			child.on('exit', function(code){

				child2 = exec(command2,{timeout: TIME_LIMIT, maxBuffer: MAX_BUFFER}, function(error, stdout, stderr){
					//console.log('stdout: ' + stdout);
					console.log('stderr: ' + stderr);

					if (error !== null) {
						if (error.signal == 'SIGTERM') {
							console.log("Killed")
							kill_msj = 'Your program is very slow or never ends, or buffer stdout is overflow. \n Signal: SIGTERM \n\n';
						}
					}
					 fs.writeFileSync(exec_file + '.out', stdout, encoding='utf8');
				});

				child2.on('exit', function(code){
					fs.readFile(exec_file + '.out', function(err, data){
						res.write('Ouput:\n\n' + kill_msj + data);
						res.end();
					});
				});	
			});
	}
	else if(ext[1] == '.py'){

	}

});

app.listen(3000);
console.log("Express server listening on port %d in %s mode", app.address(), app.settings.env);
